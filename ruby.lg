{	comment = '
	TODO: unresolved issues

	text:
	"p << end
	print me!
	end"
	symptoms:
	not recognized as a heredoc
	solution:
	there is no way to distinguish perfectly between the << operator and the start
	of a heredoc. Currently, we require assignment to recognize a heredoc. More
	refinement is possible.
	• Heredocs with indented terminators (<<-) are always distinguishable, however.
	• Nested heredocs are not really supportable at present

	text:
	print <<-''THERE'' 
	This is single quoted. 
	The above used #{Time.now} 
	THERE 
	symtoms:
	From Programming Ruby p306; should be a non-interpolated heredoc.
	
	text:
	"a\332a"
	symptoms:
	''\332'' is not recognized as slash3.. which should be octal 332.
	solution:
	plain regexp.. should be easy.

    text:
    val?(a):p(b)
    val?''a'':''b''
    symptoms:
    '':p'' is recognized as a symbol.. its 2 things '':'' and ''p''.
    :''b'' has same problem.
    solution:
    ternary operator rule, precedence stuff, symbol rule.
    but also consider ''a.b?(:c)'' ??
';
	patterns = (
		{	name = 'meta.class.ruby';
			match = '^\s*(class)\s+(([.a-zA-Z0-9_:]+(\s*(<)\s*[.a-zA-Z0-9_:]+)?)|((<<)\s*[.a-zA-Z0-9_:]+))';
			captures = {
				1 = { name = 'keyword.control.class.ruby'; };
				2 = { name = 'entity.name.type.class.ruby'; };
				4 = { name = 'entity.other.inherited-class.ruby'; };
				5 = { name = 'punctuation.separator.inheritance.ruby'; };
				6 = { name = 'variable.other.object.ruby'; };
				7 = { name = 'punctuation.definition.variable.ruby'; };
			};
		},
		{	name = 'meta.module.ruby';
			match = '^\s*(module)\s+(([A-Z]\w*(::))?([A-Z]\w*(::))?([A-Z]\w*(::))*[A-Z]\w*)';
			captures = {
				1 = { name = 'keyword.control.module.ruby'; };
				2 = { name = 'entity.name.type.module.ruby'; };
				3 = { name = 'entity.other.inherited-class.module.first.ruby'; };
				4 = { name = 'punctuation.separator.inheritance.ruby'; };
				5 = { name = 'entity.other.inherited-class.module.second.ruby'; };
				6 = { name = 'punctuation.separator.inheritance.ruby'; };
				7 = { name = 'entity.other.inherited-class.module.third.ruby'; };
				8 = { name = 'punctuation.separator.inheritance.ruby'; };
			};
		},
		{	name = 'invalid.deprecated.ruby';
			comment = 'else if is a common mistake carried over from other languages. it works if you put in a second end, but it’s never what you want.';
			match = '(?<!\.)\belse(\s)+if\b';
		},
		{	name = 'constant.other.symbol.hashkey.ruby';
			comment = 'symbols as hash key (1.9 syntax)';
			match = '(?>[a-zA-Z_]\w*(?>[?!])?)(:)(?!:)';
			captures = { 1 = { name = 'punctuation.definition.constant.ruby'; }; };
		},
		{	name = 'constant.other.symbol.hashkey.ruby';
			comment = 'symbols as hash key (1.8 syntax)';
			match = '(?<!:)(:)(?>[a-zA-Z_]\w*(?>[?!])?)(?=\s*=>)';
			captures = { 1 = { name = 'punctuation.definition.constant.ruby'; }; };
		},
		{	name = 'keyword.control.ruby';
			comment = "everything being a reserved word, not a value and needing a 'end' is a..";
			match = '(?<!\.)\b(BEGIN|begin|case|class|else|elsif|END|end|ensure|for|if|in|module|rescue|then|unless|until|when|while)\b(?![?!])';
		},
		{	name = 'keyword.control.start-block.ruby';
			comment = 'contextual smart pair support for block parameters';
			match = '(?<!\.)\bdo\b\s*';
		},
		{	name = 'meta.syntax.ruby.start-block';
			comment = 'contextual smart pair support';
			match = '(?<=\{)(\s+)';
		},
		{	name = 'keyword.operator.logical.ruby';
			comment = " as above, just doesn't need a 'end' and does a logic operation";
			match = '(?<!\.)\b(and|not|or)\b';
		},
		{	name = 'keyword.control.pseudo-method.ruby';
			comment = ' just as above but being not a logical operation';
			match = '(?<!\.)\b(alias|alias_method|break|next|redo|retry|return|super|undef|yield)\b(?![?!])|\bdefined\?|\bblock_given\?';
		},
		{	name = 'constant.language.ruby';
			match = '\b(nil|true|false)\b(?![?!])';
		},
		{	name = 'variable.language.ruby';
			match = '\b(__(FILE|LINE)__|self)\b(?![?!])';
		},
		{	name = 'keyword.other.special-method.ruby';
			comment = ' everything being a method but having a special function is a..';
			match = '\b(initialize|new|loop|include|extend|prepend|raise|attr_reader|attr_writer|attr_accessor|attr|catch|throw|private|module_function|public|protected)\b(?![?!])';
		},
		{	name = 'meta.require.ruby';
			begin = '\b(require|require_relative|gem)\b';
			end = '$|(?=#|\})';
			captures = { 1 = { name = 'keyword.other.special-method.ruby'; }; };
			patterns = ( { include = '$self'; } );
		},
		{	name = 'variable.other.readwrite.instance.ruby';
			match = '(@)[a-zA-Z_]\w*';
			captures = { 1 = { name = 'punctuation.definition.variable.ruby'; }; };
		},
		{	name = 'variable.other.readwrite.class.ruby';
			match = '(@@)[a-zA-Z_]\w*';
			captures = { 1 = { name = 'punctuation.definition.variable.ruby'; }; };
		},
		{	name = 'variable.other.readwrite.global.ruby';
			match = '(\$)[a-zA-Z_]\w*';
			captures = { 1 = { name = 'punctuation.definition.variable.ruby'; }; };
		},
		{	name = 'variable.other.readwrite.global.pre-defined.ruby';
			match = '(\$)(!|@|&|`|''|\+|\d+|~|=|/|\\|,|;|\.|<|>|_|\*|\$|\?|:|"|-[0adFiIlpv])';
			captures = { 1 = { name = 'punctuation.definition.variable.ruby'; }; };
		},
		{	name = 'meta.environment-variable.ruby';
			begin = '\b(ENV)\[';
			end = '\]';
			beginCaptures = { 1 = { name = 'variable.other.constant.ruby'; }; };
			patterns = ( { include = '$self'; } );
		},
		{	name = 'support.class.ruby';
			match = '\b[A-Z]\w*(?=((\.|::)[A-Za-z]|\[))';
		},
		{	name = 'variable.other.constant.ruby';
			match = '\b[A-Z]\w*\b';
		},
		{	name = 'meta.function.method.with-arguments.ruby';
			comment = 'the method pattern comes from the symbol pattern, see there for a explaination';
			begin = '(?x)
			         (?=def\b)                                                      # an optimization to help Oniguruma fail fast
			         (?<=^|\s)(def)\s+                                              # the def keyword
			         ( (?>[a-zA-Z_]\w*(?>\.|::))?                                   # a method name prefix
			           (?>[a-zA-Z_]\w*(?>[?!]|=(?!>))?                              # the method name
			           |===?|>[>=]?|<=>|<[<=]?|[%&`/\|]|\*\*?|=?~|[-+]@?|\[\]=?) )  # …or an operator method
			         \s*(\()                                                        # the openning parenthesis for arguments
			        ';
			end = '\)';
			beginCaptures = {
				1 = { name = 'keyword.control.def.ruby'; };
				2 = { name = 'entity.name.function.ruby'; };
				3 = { name = 'punctuation.definition.parameters.ruby'; };
			};
			endCaptures = { 0 = { name = 'punctuation.definition.parameters.ruby'; }; };
			patterns = (
				{	begin = '(?![\s,)])';
					end = '(?=[,)])';
					patterns = (
						{	match = '\G([&*]?)([_a-zA-Z][_a-zA-Z0-9]*)';
							captures = {
								1 = { name = 'storage.type.variable.ruby'; };
								2 = { name = 'variable.parameter.function.ruby'; };
							};
						},
						{	include = '$self'; },
					);
				},
			);
		},
		{	name = 'meta.function.method.with-arguments.ruby';
			comment = 'same as the previous rule, but without parentheses around the arguments';
			begin = '(?x)
			         (?=def\b)                                                      # an optimization to help Oniguruma fail fast
			         (?<=^|\s)(def)\s+                                              # the def keyword
			         ( (?>[a-zA-Z_]\w*(?>\.|::))?                                   # a method name prefix
			           (?>[a-zA-Z_]\w*(?>[?!]|=(?!>))?                              # the method name
			           |===?|>[>=]?|<=>|<[<=]?|[%&`/\|]|\*\*?|=?~|[-+]@?|\[\]=?) )  # …or an operator method
			         [ \t]                                                          # the space separating the arguments
			         (?=[ \t]*[^\s#;])                                              # make sure arguments and not a comment follow
			        ';
			end = '$';
			beginCaptures = {
				1 = { name = 'keyword.control.def.ruby'; };
				2 = { name = 'entity.name.function.ruby'; };
			};
			patterns = (
				{	begin = '(?![\s,])';
					end = '(?=,|$)';
					patterns = (
						{	name = 'variable.parameter.function.ruby';
							match = '\G([&*]?)[_a-zA-Z][_a-zA-Z0-9]*';
							captures = { 1 = { name = 'punctuation.definition.variable.ruby'; }; };
						},
						{	include = '$self'; },
					);
				},
			);
		},
		{	name = 'meta.function.method.without-arguments.ruby';
			comment = ' the optional name is just to catch the def also without a method-name';
			match = '(?x)
			         (?=def\b)                                                           # an optimization to help Oniguruma fail fast
			         (?<=^|\s)(def)\b                                                    # the def keyword
			         ( \s+                                                               # an optional group of whitespace followed by…
			           ( (?>[a-zA-Z_]\w*(?>\.|::))?                                      # a method name prefix
			             (?>[a-zA-Z_]\w*(?>[?!]|=(?!>))?                                 # the method name
			             |===?|>[>=]?|<=>|<[<=]?|[%&`/\|]|\*\*?|=?~|[-+]@?|\[\]=?) ) )?  # …or an operator method
			        ';
			captures = {
				1 = { name = 'keyword.control.def.ruby'; };
				3 = { name = 'entity.name.function.ruby'; };
			};
		},
		{	name = 'constant.numeric.ruby';
			match = '\b(0[xX]\h(?>_?\h)*|\d(?>_?\d)*(\.(?![^[:space:][:digit:]])(?>_?\d)*)?([eE][-+]?\d(?>_?\d)*)?|0[bB][01]+)\b';
		},
		{	name = 'constant.other.symbol.single-quoted.ruby';
			begin = ":'";
			end = "'";
			captures = { 0 = { name = 'punctuation.definition.constant.ruby'; }; };
			patterns = (
				{	name = 'constant.character.escape.ruby';
					match = '\\[''\\]';
				},
			);
		},
		{	name = 'constant.other.symbol.double-quoted.ruby';
			begin = ':"';
			end = '"';
			captures = { 0 = { name = 'punctuation.definition.constant.ruby'; }; };
			patterns = (
				{	include = '#interpolated_ruby'; },
				{	include = '#escaped_char'; },
			);
		},
		{	name = 'keyword.operator.assignment.augmented.ruby';
			comment = 'Needs higher precidence than regular expressions.';
			match = '(?<!\()/=';
		},
		{	name = 'string.quoted.single.ruby';
			comment = 'single quoted string (does not allow interpolation)';
			begin = "'";
			end = "'";
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	name = 'constant.character.escape.ruby';
					match = '\\''|\\\\';
				},
			);
		},
		{	name = 'string.quoted.double.ruby';
			comment = 'double quoted string (allows for interpolation)';
			begin = '"';
			end = '"';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	include = '#interpolated_ruby'; },
				{	include = '#escaped_char'; },
			);
		},
		{	name = 'string.interpolated.ruby';
			comment = 'execute string (allows for interpolation)';
			begin = '`';
			end = '`';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	include = '#interpolated_ruby'; },
				{	include = '#escaped_char'; },
			);
		},
		{	name = 'string.interpolated.ruby';
			comment = 'execute string (allow for interpolation)';
			begin = '%x\{';
			end = '\}';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	include = '#interpolated_ruby'; },
				{	include = '#escaped_char'; },
				{	include = '#nest_curly_i'; },
			);
		},
		{	name = 'string.interpolated.ruby';
			comment = 'execute string (allow for interpolation)';
			begin = '%x\[';
			end = '\]';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	include = '#interpolated_ruby'; },
				{	include = '#escaped_char'; },
				{	include = '#nest_brackets_i'; },
			);
		},
		{	name = 'string.interpolated.ruby';
			comment = 'execute string (allow for interpolation)';
			begin = '%x\<';
			end = '\>';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	include = '#interpolated_ruby'; },
				{	include = '#escaped_char'; },
				{	include = '#nest_ltgt_i'; },
			);
		},
		{	name = 'string.interpolated.ruby';
			comment = 'execute string (allow for interpolation)';
			begin = '%x\(';
			end = '\)';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	include = '#interpolated_ruby'; },
				{	include = '#escaped_char'; },
				{	include = '#nest_parens_i'; },
			);
		},
		{	name = 'string.interpolated.ruby';
			comment = 'execute string (allow for interpolation)';
			begin = '%x([^\w])';
			end = '\1';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	include = '#interpolated_ruby'; },
				{	include = '#escaped_char'; },
			);
		},
		{	comment = 'regular expressions (normal)
			we only start a regexp if the character before it (excluding whitespace)
			is what we think is before a regexp
			';
			begin = '(?x)
			   (?:
			     ^                      # beginning of line
			   | (?<=                   # or look-behind on:
			       [=>~(?:\[,|&;]
			     | [\s;]if\s			# keywords
			     | [\s;]elsif\s
			     | [\s;]while\s
			     | [\s;]unless\s
			     | [\s;]when\s
			     | [\s;]assert_match\s
			     | [\s;]or\s			# boolean opperators
			     | [\s;]and\s
			     | [\s;]not\s
			     | [\s.]index\s			# methods
			     | [\s.]scan\s
			     | [\s.]sub\s
			     | [\s.]sub!\s
			     | [\s.]gsub\s
			     | [\s.]gsub!\s
			     | [\s.]match\s
			     )
			   | (?<=                  # or a look-behind with line anchor:
			        ^when\s            # duplication necessary due to limits of regex
			      | ^if\s
			      | ^elsif\s
			      | ^while\s
			      | ^unless\s
			      )
			   )
			   \s*((/))(?![*+{}?])
			';
			end = '((/[eimnosux]*))';
			captures = {
				1 = { name = 'string.regexp.classic.ruby'; };
				2 = { name = 'punctuation.definition.string.ruby'; };
			};
			contentName = 'string.regexp.classic.ruby';
			patterns = ( { include = '#regex_sub'; } );
		},
		{	name = 'string.regexp.mod-r.ruby';
			comment = 'regular expressions (literal)';
			begin = '%r\{';
			end = '\}[eimnosux]*';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	include = '#regex_sub'; },
				{	include = '#nest_curly_r'; },
			);
		},
		{	name = 'string.regexp.mod-r.ruby';
			comment = 'regular expressions (literal)';
			begin = '%r\[';
			end = '\][eimnosux]*';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	include = '#regex_sub'; },
				{	include = '#nest_brackets_r'; },
			);
		},
		{	name = 'string.regexp.mod-r.ruby';
			comment = 'regular expressions (literal)';
			begin = '%r\(';
			end = '\)[eimnosux]*';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	include = '#regex_sub'; },
				{	include = '#nest_parens_r'; },
			);
		},
		{	name = 'string.regexp.mod-r.ruby';
			comment = 'regular expressions (literal)';
			begin = '%r\<';
			end = '\>[eimnosux]*';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	include = '#regex_sub'; },
				{	include = '#nest_ltgt_r'; },
			);
		},
		{	name = 'string.regexp.mod-r.ruby';
			comment = 'regular expressions (literal)';
			begin = '%r([^\w])';
			end = '\1[eimnosux]*';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = ( { include = '#regex_sub'; } );
		},
		{	name = 'string.quoted.other.literal.upper.ruby';
			comment = 'literal capable of interpolation ()';
			begin = '%[QWSR]?\(';
			end = '\)';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	include = '#interpolated_ruby'; },
				{	include = '#escaped_char'; },
				{	include = '#nest_parens_i'; },
			);
		},
		{	name = 'string.quoted.other.literal.upper.ruby';
			comment = 'literal capable of interpolation []';
			begin = '%[QWSR]?\[';
			end = '\]';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	include = '#interpolated_ruby'; },
				{	include = '#escaped_char'; },
				{	include = '#nest_brackets_i'; },
			);
		},
		{	name = 'string.quoted.other.literal.upper.ruby';
			comment = 'literal capable of interpolation <>';
			begin = '%[QWSR]?\<';
			end = '\>';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	include = '#interpolated_ruby'; },
				{	include = '#escaped_char'; },
				{	include = '#nest_ltgt_i'; },
			);
		},
		{	name = 'string.quoted.double.ruby.mod';
			comment = 'literal capable of interpolation -- {}';
			begin = '%[QWSR]?\{';
			end = '\}';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	include = '#interpolated_ruby'; },
				{	include = '#escaped_char'; },
				{	include = '#nest_curly_i'; },
			);
		},
		{	name = 'string.quoted.other.literal.upper.ruby';
			comment = 'literal capable of interpolation -- wildcard';
			begin = '%[QWSR]([^\w])';
			end = '\1';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	include = '#interpolated_ruby'; },
				{	include = '#escaped_char'; },
			);
		},
		{	name = 'string.quoted.other.literal.other.ruby';
			comment = 'literal capable of interpolation -- wildcard';
			begin = '%([^\w\s=])';
			end = '\1';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	include = '#interpolated_ruby'; },
				{	include = '#escaped_char'; },
			);
		},
		{	name = 'string.quoted.other.literal.lower.ruby';
			comment = 'literal incapable of interpolation -- ()';
			begin = '%[qws]\(';
			end = '\)';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	name = 'constant.character.escape.ruby';
					match = '\\\)|\\\\';
				},
				{	include = '#nest_parens'; },
			);
		},
		{	name = 'string.quoted.other.literal.lower.ruby';
			comment = 'literal incapable of interpolation -- <>';
			begin = '%[qws]\<';
			end = '\>';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	name = 'constant.character.escape.ruby';
					match = '\\\>|\\\\';
				},
				{	include = '#nest_ltgt'; },
			);
		},
		{	name = 'string.quoted.other.literal.lower.ruby';
			comment = 'literal incapable of interpolation -- []';
			begin = '%[qws]\[';
			end = '\]';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	name = 'constant.character.escape.ruby';
					match = '\\\]|\\\\';
				},
				{	include = '#nest_brackets'; },
			);
		},
		{	name = 'string.quoted.other.literal.lower.ruby';
			comment = 'literal incapable of interpolation -- {}';
			begin = '%[qws]\{';
			end = '\}';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	name = 'constant.character.escape.ruby';
					match = '\\\}|\\\\';
				},
				{	include = '#nest_curly'; },
			);
		},
		{	name = 'string.quoted.other.literal.lower.ruby';
			comment = 'literal incapable of interpolation -- wildcard';
			begin = '%[qws]([^\w])';
			end = '\1';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	comment = 'Cant be named because its not neccesarily an escape.';
					match = '\\.';
				},
			);
		},
		{	name = 'constant.other.symbol.ruby';
			comment = 'symbols';
			match = '(?<!:)(:)(?>[a-zA-Z_]\w*(?>[?!]|=(?![>=]))?|===?|>[>=]?|<[<=]?|<=>|[%&`/\|]|\*\*?|=?~|[-+]@?|\[\]=?|@@?[a-zA-Z_]\w*)';
			captures = { 1 = { name = 'punctuation.definition.constant.ruby'; }; };
		},
		{	name = 'comment.block.documentation.ruby';
			comment = 'multiline comments';
			begin = '^=begin';
			end = '^=end';
			captures = { 0 = { name = 'punctuation.definition.comment.ruby'; }; };
		},
		{	begin = '(^[ \t]+)?(?=#)';
			end = '(?!\G)';
			beginCaptures = { 1 = { name = 'punctuation.whitespace.comment.leading.ruby'; }; };
			patterns = (
				{	name = 'comment.line.number-sign.ruby';
					begin = '#';
					end = '\n';
					beginCaptures = { 0 = { name = 'punctuation.definition.comment.ruby'; }; };
				},
			);
		},
		{	name = 'constant.numeric.ruby';
			comment = '
			matches questionmark-letters.

			examples (1st alternation = hex):
			?\x1     ?\x61

			examples (2nd alternation = octal):
			?\0      ?\07     ?\017

			examples (3rd alternation = escaped):
			?\n      ?\b

			examples (4th alternation = meta-ctrl):
			?\C-a    ?\M-a    ?\C-\M-\C-\M-a

			examples (4th alternation = normal):
			?a       ?A       ?0 
			?*       ?"       ?( 
			?.       ?#
			
			
			the negative lookbehind prevents against matching
			p(42.tainted?)
			';
			match = '(?<!\w)\?(\\(x\h{1,2}(?!\h)\b|0[0-7]{0,2}(?![0-7])\b|[^x0MC])|(\\[MC]-)+\w|[^\s\\])';
		},
		{	comment = '__END__ marker';
			begin = '^__END__\n';
			end = '(?=not)impossible';
			captures = { 0 = { name = 'string.unquoted.program-block.ruby'; }; };
			contentName = 'text.plain';
			patterns = (
				{	name = 'text.html.embedded.ruby';
					begin = '(?=<?xml|<(?i:html\b)|!DOCTYPE (?i:html\b))';
					end = '(?=not)impossible';
					patterns = ( { include = 'text.html.basic'; } );
				},
			);
		},
		{	name = 'meta.embedded.block.html';
			comment = 'Heredoc with embedded html';
			begin = '(?=(?><<-("?)((?:[_\w]+_|)HTML)\b\1))';
			end = '(?!\G)';
			patterns = (
				{	name = 'string.unquoted.heredoc.ruby';
					begin = '(?><<-("?)((?:[_\w]+_|)HTML)\b\1)';
					end = '\s*\2$\n?';
					beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
					endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
					contentName = 'text.html';
					patterns = (
						{	include = '#heredoc'; },
						{	include = '#interpolated_ruby'; },
						{	include = 'text.html.basic'; },
						{	include = '#escaped_char'; },
					);
				},
			);
		},
		{	name = 'meta.embedded.block.sql';
			comment = 'Heredoc with embedded sql';
			begin = '(?=(?><<-("?)((?:[_\w]+_|)SQL)\b\1))';
			end = '(?!\G)';
			patterns = (
				{	name = 'string.unquoted.heredoc.ruby';
					begin = '(?><<-("?)((?:[_\w]+_|)SQL)\b\1)';
					end = '\s*\2$\n?';
					beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
					endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
					contentName = 'source.sql';
					patterns = (
						{	include = '#heredoc'; },
						{	include = '#interpolated_ruby'; },
						{	include = 'source.sql'; },
						{	include = '#escaped_char'; },
					);
				},
			);
		},
		{	name = 'meta.embedded.block.css';
			comment = 'Heredoc with embedded css';
			begin = '(?=(?><<-("?)((?:[_\w]+_|)CSS)\b\1))';
			end = '(?!\G)';
			patterns = (
				{	name = 'string.unquoted.heredoc.ruby';
					begin = '(?><<-("?)((?:[_\w]+_|)CSS)\b\1)';
					end = '\s*\2$\n?';
					beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
					endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
					contentName = 'source.css';
					patterns = (
						{	include = '#heredoc'; },
						{	include = '#interpolated_ruby'; },
						{	include = 'source.css'; },
						{	include = '#escaped_char'; },
					);
				},
			);
		},
		{	name = 'meta.embedded.block.c++';
			comment = 'Heredoc with embedded c++';
			begin = '(?=(?><<-("?)((?:[_\w]+_|)CPP)\b\1))';
			end = '(?!\G)';
			patterns = (
				{	name = 'string.unquoted.heredoc.ruby';
					begin = '(?><<-("?)((?:[_\w]+_|)CPP)\b\1)';
					end = '\s*\2$\n?';
					beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
					endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
					contentName = 'source.c++';
					patterns = (
						{	include = '#heredoc'; },
						{	include = '#interpolated_ruby'; },
						{	include = 'source.c++'; },
						{	include = '#escaped_char'; },
					);
				},
			);
		},
		{	name = 'meta.embedded.block.c';
			comment = 'Heredoc with embedded c';
			begin = '(?=(?><<-("?)((?:[_\w]+_|)C)\b\1))';
			end = '(?!\G)';
			patterns = (
				{	name = 'string.unquoted.heredoc.ruby';
					begin = '(?><<-("?)((?:[_\w]+_|)C)\b\1)';
					end = '\s*\2$\n?';
					beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
					endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
					contentName = 'source.c';
					patterns = (
						{	include = '#heredoc'; },
						{	include = '#interpolated_ruby'; },
						{	include = 'source.c'; },
						{	include = '#escaped_char'; },
					);
				},
			);
		},
		{	name = 'meta.embedded.block.js';
			comment = 'Heredoc with embedded javascript';
			begin = '(?=(?><<-("?)((?:[_\w]+_|)(?:JS|JAVASCRIPT))\b\1))';
			end = '(?!\G)';
			patterns = (
				{	name = 'string.unquoted.heredoc.ruby';
					begin = '(?><<-("?)((?:[_\w]+_|)(?:JS|JAVASCRIPT))\b\1)';
					end = '\s*\2$\n?';
					beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
					endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
					contentName = 'source.js';
					patterns = (
						{	include = '#heredoc'; },
						{	include = '#interpolated_ruby'; },
						{	include = 'source.js'; },
						{	include = '#escaped_char'; },
					);
				},
			);
		},
		{	name = 'meta.embedded.block.js.jquery';
			comment = 'Heredoc with embedded jQuery javascript';
			begin = '(?=(?><<-("?)((?:[_\w]+_|)JQUERY)\b\1))';
			end = '(?!\G)';
			patterns = (
				{	name = 'string.unquoted.heredoc.ruby';
					begin = '(?><<-("?)((?:[_\w]+_|)JQUERY)\b\1)';
					end = '\s*\2$\n?';
					beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
					endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
					contentName = 'source.js.jquery';
					patterns = (
						{	include = '#heredoc'; },
						{	include = '#interpolated_ruby'; },
						{	include = 'source.js.jquery'; },
						{	include = '#escaped_char'; },
					);
				},
			);
		},
		{	name = 'meta.embedded.block.shell';
			comment = 'Heredoc with embedded shell';
			begin = '(?=(?><<-("?)((?:[_\w]+_|)(?:SH|SHELL))\b\1))';
			end = '(?!\G)';
			patterns = (
				{	name = 'string.unquoted.heredoc.ruby';
					begin = '(?><<-("?)((?:[_\w]+_|)(?:SH|SHELL))\b\1)';
					end = '\s*\2$\n?';
					beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
					endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
					contentName = 'source.shell';
					patterns = (
						{	include = '#heredoc'; },
						{	include = '#interpolated_ruby'; },
						{	include = 'source.shell'; },
						{	include = '#escaped_char'; },
					);
				},
			);
		},
		{	name = 'meta.embedded.block.lua';
			comment = 'Heredoc with embedded lua';
			begin = '(?=(?><<-("?)((?:[_\w]+_|)LUA)\b\1))';
			end = '(?!\G)';
			patterns = (
				{	name = 'string.unquoted.heredoc.ruby';
					begin = '(?><<-("?)((?:[_\w]+_|)LUA)\b\1)';
					end = '\s*\2$\n?';
					beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
					endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
					contentName = 'source.lua';
					patterns = (
						{	include = '#heredoc'; },
						{	include = '#interpolated_ruby'; },
						{	include = 'source.lua'; },
						{	include = '#escaped_char'; },
					);
				},
			);
		},
		{	name = 'meta.embedded.block.ruby';
			comment = 'Heredoc with embedded ruby';
			begin = '(?=(?><<-("?)((?:[_\w]+_|)RUBY)\b\1))';
			end = '(?!\G)';
			patterns = (
				{	name = 'string.unquoted.heredoc.ruby';
					begin = '(?><<-("?)((?:[_\w]+_|)RUBY)\b\1)';
					end = '\s*\2$\n?';
					beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
					endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
					contentName = 'source.ruby';
					patterns = (
						{	include = '#heredoc'; },
						{	include = '#interpolated_ruby'; },
						{	include = 'source.ruby'; },
						{	include = '#escaped_char'; },
					);
				},
			);
		},
		{	name = 'string.unquoted.heredoc.ruby';
			begin = '(?>\=\s*<<(\w+))';
			end = '^\1$';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	include = '#heredoc'; },
				{	include = '#interpolated_ruby'; },
				{	include = '#escaped_char'; },
			);
		},
		{	name = 'string.unquoted.heredoc.ruby';
			comment = 'heredoc with indented terminator';
			begin = '(?><<-(\w+))';
			end = '\s*\1$';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.ruby'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.ruby'; }; };
			patterns = (
				{	include = '#heredoc'; },
				{	include = '#interpolated_ruby'; },
				{	include = '#escaped_char'; },
			);
		},
		{	begin = '(?<=\{|do|\{\s|do\s)(\|)';
			end = '(\|)';
			captures = { 1 = { name = 'punctuation.separator.variable.ruby'; }; };
			patterns = (
				{	name = 'variable.other.block.ruby';
					match = '[_a-zA-Z][_a-zA-Z0-9]*';
				},
				{	name = 'punctuation.separator.variable.ruby';
					match = ',';
				},
			);
		},
		{	name = 'punctuation.separator.key-value';
			match = '=>';
		},
		{	name = 'keyword.operator.assignment.augmented.ruby';
			match = '<<=|%=|&=|\*=|\*\*=|\+=|\-=|\^=|\|{1,2}=|<<';
		},
		{	name = 'keyword.operator.comparison.ruby';
			match = '<=>|<(?!<|=)|>(?!<|=|>)|<=|>=|===|==|=~|!=|!~|(?<=[ \t])\?';
		},
		{	name = 'keyword.operator.logical.ruby';
			match = '(?<=[ \t])!+|\bnot\b|&&|\band\b|\|\||\bor\b|\^';
		},
		{	name = 'keyword.operator.arithmetic.ruby';
			match = '(%|&|\*\*|\*|\+|\-|/)';
		},
		{	name = 'keyword.operator.assignment.ruby';
			match = '=';
		},
		{	name = 'keyword.operator.other.ruby';
			match = '\||~|>>';
		},
		{	name = 'punctuation.separator.other.ruby';
			match = ':';
		},
		{	name = 'punctuation.separator.statement.ruby';
			match = '\;';
		},
		{	name = 'punctuation.separator.object.ruby';
			match = ',';
		},
		{	name = 'punctuation.separator.method.ruby';
			match = '\.|::';
		},
		{	name = 'punctuation.section.scope.begin.ruby';
			match = '\{';
		},
		{	name = 'punctuation.section.scope.end.ruby';
			match = '\}';
		},
		{	name = 'punctuation.section.array.begin.ruby';
			match = '\[';
		},
		{	name = 'punctuation.section.array.end.ruby';
			match = '\]';
		},
		{	name = 'punctuation.section.function.ruby';
			match = '\(|\)';
		},
	);
	repository = {
		escaped_char = {
			name = 'constant.character.escape.ruby';
			match = '\\(?:[0-7]{1,3}|x[\da-fA-F]{1,2}|.)';
		};
		heredoc = {
			begin = '^<<-?\w+';
			end = '$';
			patterns = ( { include = '$self'; } );
		};
		interpolated_ruby = {
			patterns = (
				{	name = 'meta.embedded.line.ruby';
					begin = '#\{';
					end = '(\})';
					beginCaptures = { 0 = { name = 'punctuation.section.embedded.begin.ruby'; }; };
					endCaptures = {
						0 = { name = 'punctuation.section.embedded.end.ruby'; };
						1 = { name = 'source.ruby'; };
					};
					contentName = 'source.ruby';
					patterns = (
						{	include = '#nest_curly_and_self'; },
						{	include = '$self'; },
					);
				},
				{	name = 'variable.other.readwrite.instance.ruby';
					match = '(#@)[a-zA-Z_]\w*';
					captures = { 1 = { name = 'punctuation.definition.variable.ruby'; }; };
				},
				{	name = 'variable.other.readwrite.class.ruby';
					match = '(#@@)[a-zA-Z_]\w*';
					captures = { 1 = { name = 'punctuation.definition.variable.ruby'; }; };
				},
				{	name = 'variable.other.readwrite.global.ruby';
					match = '(#\$)[a-zA-Z_]\w*';
					captures = { 1 = { name = 'punctuation.definition.variable.ruby'; }; };
				},
			);
		};
		nest_brackets = {
			begin = '\[';
			end = '\]';
			captures = { 0 = { name = 'punctuation.section.scope.ruby'; }; };
			patterns = ( { include = '#nest_brackets'; } );
		};
		nest_brackets_i = {
			begin = '\[';
			end = '\]';
			captures = { 0 = { name = 'punctuation.section.scope.ruby'; }; };
			patterns = (
				{	include = '#interpolated_ruby'; },
				{	include = '#escaped_char'; },
				{	include = '#nest_brackets_i'; },
			);
		};
		nest_brackets_r = {
			begin = '\[';
			end = '\]';
			captures = { 0 = { name = 'punctuation.section.scope.ruby'; }; };
			patterns = (
				{	include = '#regex_sub'; },
				{	include = '#nest_brackets_r'; },
			);
		};
		nest_curly = {
			begin = '\{';
			end = '\}';
			captures = { 0 = { name = 'punctuation.section.scope.ruby'; }; };
			patterns = ( { include = '#nest_curly'; } );
		};
		nest_curly_and_self = {
			patterns = (
				{	begin = '\{';
					end = '\}';
					captures = { 0 = { name = 'punctuation.section.scope.ruby'; }; };
					patterns = ( { include = '#nest_curly_and_self'; } );
				},
				{	include = '$self'; },
			);
		};
		nest_curly_i = {
			begin = '\{';
			end = '\}';
			captures = { 0 = { name = 'punctuation.section.scope.ruby'; }; };
			patterns = (
				{	include = '#interpolated_ruby'; },
				{	include = '#escaped_char'; },
				{	include = '#nest_curly_i'; },
			);
		};
		nest_curly_r = {
			begin = '\{';
			end = '\}';
			captures = { 0 = { name = 'punctuation.section.scope.ruby'; }; };
			patterns = (
				{	include = '#regex_sub'; },
				{	include = '#nest_curly_r'; },
			);
		};
		nest_ltgt = {
			begin = '\<';
			end = '\>';
			captures = { 0 = { name = 'punctuation.section.scope.ruby'; }; };
			patterns = ( { include = '#nest_ltgt'; } );
		};
		nest_ltgt_i = {
			begin = '\<';
			end = '\>';
			captures = { 0 = { name = 'punctuation.section.scope.ruby'; }; };
			patterns = (
				{	include = '#interpolated_ruby'; },
				{	include = '#escaped_char'; },
				{	include = '#nest_ltgt_i'; },
			);
		};
		nest_ltgt_r = {
			begin = '\<';
			end = '\>';
			captures = { 0 = { name = 'punctuation.section.scope.ruby'; }; };
			patterns = (
				{	include = '#regex_sub'; },
				{	include = '#nest_ltgt_r'; },
			);
		};
		nest_parens = {
			begin = '\(';
			end = '\)';
			captures = { 0 = { name = 'punctuation.section.scope.ruby'; }; };
			patterns = ( { include = '#nest_parens'; } );
		};
		nest_parens_i = {
			begin = '\(';
			end = '\)';
			captures = { 0 = { name = 'punctuation.section.scope.ruby'; }; };
			patterns = (
				{	include = '#interpolated_ruby'; },
				{	include = '#escaped_char'; },
				{	include = '#nest_parens_i'; },
			);
		};
		nest_parens_r = {
			begin = '\(';
			end = '\)';
			captures = { 0 = { name = 'punctuation.section.scope.ruby'; }; };
			patterns = (
				{	include = '#regex_sub'; },
				{	include = '#nest_parens_r'; },
			);
		};
		regex_sub = {
			patterns = (
				{	include = '#interpolated_ruby'; },
				{	include = '#escaped_char'; },
				{	name = 'string.regexp.arbitrary-repitition.ruby';
					match = '(\{)\d+(,\d+)?(\})';
					captures = {
						1 = { name = 'punctuation.definition.arbitrary-repitition.ruby'; };
						3 = { name = 'punctuation.definition.arbitrary-repitition.ruby'; };
					};
				},
				{	name = 'string.regexp.character-class.ruby';
					begin = '\[(?:\^?\])?';
					end = '\]';
					captures = { 0 = { name = 'punctuation.definition.character-class.ruby'; }; };
					patterns = ( { include = '#escaped_char'; } );
				},
				{	name = 'comment.line.number-sign.ruby';
					begin = '\(\?#';
					end = '\)';
					beginCaptures = { 0 = { name = 'punctuation.definition.comment.begin.ruby'; }; };
					endCaptures = { 0 = { name = 'punctuation.definition.comment.end.ruby'; }; };
					patterns = ( { include = '#escaped_char'; } );
				},
				{	name = 'string.regexp.group.ruby';
					begin = '\(';
					end = '\)';
					captures = { 0 = { name = 'punctuation.definition.group.ruby'; }; };
					patterns = ( { include = '#regex_sub'; } );
				},
				{	name = 'comment.line.number-sign.ruby';
					comment = 'We are restrictive in what we allow to go after the comment character to avoid false positives, since the availability of comments depend on regexp flags.';
					begin = '(?<=^|\s)(#)\s(?=[[a-zA-Z0-9,. \t?!-][^\x{00}-\x{7F}]]*$)';
					end = '$\n?';
					beginCaptures = { 1 = { name = 'punctuation.definition.comment.ruby'; }; };
					endCaptures = { 0 = { name = 'punctuation.definition.comment.ruby'; }; };
				},
			);
		};
	};
}